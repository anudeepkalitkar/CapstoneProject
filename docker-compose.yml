version: '2'
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic newsarticles --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  
  producer:
    deploy:
      replicas: 1
    build: ./Producer
    container_name: producerContainer
    environment:
      - PRODUCER_ENDPOINT=192.168.0.2
    ports:
      - "50030:50030"
    networks:
      vpcbr:
        ipv4_address: 192.168.0.2
    depends_on:
      - zookeeper
      - kafka

  # consumer:
  #   deploy:
  #     replicas: 1
  #   build: ./Consumer
  #   container_name: consumerContainer
  #   hostname: driver
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   environment:
  #     - PRODUCER_ENDPOINT=192.168.0.2
  #   ports:
  #     - "8088:8088"
  #     - "8042:8042"
  #     - "4041:4041"
  
  #   networks:
  #     vpcbr:
  #       ipv4_address: 192.168.0.3
  

  webapi:
    deploy:
      replicas: 1
    build: ./WebApi
    container_name: apicontainer
    ports:
      - "5000:5000"
    networks:
      vpcbr:
        ipv4_address: 192.168.0.4

  
  webapp:
    deploy:
      replicas: 1
    build: ./webapp
    container_name: webappContainer
    ports:
      - "5500:5500"
    networks:
      vpcbr:
        ipv4_address: 192.168.0.5

networks:
  vpcbr:
    driver: bridge
    ipam:
     config:
       - subnet: 192.168.0.0/16
         gateway: 192.168.0.1